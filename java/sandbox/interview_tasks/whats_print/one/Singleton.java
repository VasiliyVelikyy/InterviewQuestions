package sandbox.interview_tasks.whats_print.one;

public class Singleton {
    private static Singleton instance;

    private static class SingletonHolder {
        private static Singleton instance = new Singleton();
    }

    public static Singleton getInstance() {
        return SingletonHolder.instance;
    }
}
/*
Ленивая инициализация: Синглтон инициализируется в момент первого вызова метода getInstance().
Конструктор Singleton не вызывается до тех пор, пока не потребуется объект класса.

SingletonHolder (вложенный статический класс):
Важно, что вложенный класс SingletonHolder содержит статическую переменную instance, которая инициализирует синглтон.
 В Java вложенные статические классы (такие как SingletonHolder) инициализируются только при первом доступе к ним.
 Это значит, что создание объекта синглтона происходит лениво, когда вызывается SingletonHolder.instance, и только один раз.

Потокобезопасность: Статическая переменная instance в классе SingletonHolder инициализируется только один раз,
 когда класс SingletonHolder загружается в JVM, и это гарантируется механизмом инициализации классов в Java. Инициализация этого статического поля происходит в момент первого обращения к классу, а это осуществляется без явной синхронизации, но при этом гарантируется потокобезопасность благодаря механизмам загрузки классов в JVM.

Важно, что с момента, когда класс SingletonHolder загружается и инициализируется, его статическое поле instance будет установлено только один раз, и в многопоточной среде JVM гарантирует, что этот процесс будет безопасным. После этого объект будет доступен всем потокам.
Почему потокобезопасно
Lazy initialization: Инициализация происходит только при первом доступе, и используется механизм загрузки классов в Java, который гарантирует, что инициализация будет выполнена корректно и только один раз.

Не требуется явной синхронизации: Нет необходимости использовать synchronized или другие механизмы синхронизации, потому что потокобезопасность обеспечивается за счет механизма инициализации статических вложенных классов в Java.*/